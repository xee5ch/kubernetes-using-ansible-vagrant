- hosts: localhost
  environment:
    KUBECONFIG: "{{ playbook_dir }}/output/config"
  args:
    kubernetes_dashboard_url: https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml
  tasks:
    - name: Install kubernetes dashboard from recommended url
      block:
        - name: Create temporary directory for manifests
          tempfile:
            state: directory
            suffix: kubernetes_manifests
          register: kubernetes_manifests

        - name: Download manifests
          get_url:
            url: "{{ kubernetes_dashboard_url }}"
            dest: "{{ kubernetes_manifests.path }}/kubernetes-dashboard.yaml"

        - name: Kubernetes-dashboard apply
          community.kubernetes.k8s:
            state: present
            definition: "{{ lookup('file', '{{ kubernetes_manifests.path }}/kubernetes-dashboard.yaml') | from_yaml_all }}"

        - name: Create service account for admin-user
          community.kubernetes.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: admin-user
                namespace: kubernetes-dashboard

        - name: Create ClusterRoleBinding for admin-user
          community.kubernetes.k8s:
            state: present
            definition:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: admin-user
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: cluster-admin
              subjects:
              - kind: ServiceAccount
                name: admin-user
                namespace: kubernetes-dashboard

        - name: Get token
          shell: kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath="{.secrets[0].name}") -o go-template="{{ '{{' }}.data.token | base64decode{{ '}}' }}"
          register: token

        - name: Save token to a file
          local_action:
            copy content="{{ token.stdout }}" dest="{{ playbook_dir }}/output/token"